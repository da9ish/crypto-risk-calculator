{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","useState","orderType","setOrderType","risk","setRisk","accountBalance","setAccountBalance","entry","setEntry","stopLoss","setStopLoss","error","setError","calculateLossAmount","useMemo","position","stopPosition","useEffect","className","onClick","htmlFor","name","value","onChange","e","Number","parseFloat","target","type","inputMode","toPrecision","Math","abs","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.f3191fca.chunk.js","sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\nimport \"./styles.css\";\n\nexport default function App() {\n  const [orderType, setOrderType] = useState(\"long\");\n  const [risk, setRisk] = useState(1);\n  const [accountBalance, setAccountBalance] = useState(0);\n  const [entry, setEntry] = useState(0);\n  const [stopLoss, setStopLoss] = useState(0);\n  const [error, setError] = useState(\"\");\n\n  const calculateLossAmount = useMemo(() => {\n    return accountBalance * (risk / 100);\n  }, [accountBalance, risk]);\n\n  const position = useMemo(() => {\n    const entryPosition = accountBalance / entry;\n    const stopPosition = accountBalance / stopLoss;\n    const lossAmount = (stopPosition - entryPosition) * stopLoss;\n\n    return (stopPosition * calculateLossAmount) / lossAmount;\n  }, [accountBalance, calculateLossAmount, entry, stopLoss]);\n\n  useEffect(() => {\n    if (orderType === \"long\" && stopLoss >= entry) {\n      setError(\"Entry price cannot be less than or equal to stop loss price.\");\n    } else if (orderType === \"short\" && entry >= stopLoss) {\n      setError(\"Exit price cannot be less than or equal to entry price.\");\n    } else {\n      setError(\"\");\n    }\n  }, [orderType, accountBalance, entry, stopLoss]);\n\n  return (\n    <div className=\"App\">\n      <h2>Trade Risk Management</h2>\n      <div className=\"order-type-tabs\">\n        <div\n          className={`long ${orderType === \"long\" && \"active\"}`}\n          onClick={() => setOrderType(\"long\")}\n        >\n          Long\n        </div>\n        <div\n          className={`short ${orderType === \"short\" && \"active\"}`}\n          onClick={() => setOrderType(\"short\")}\n        >\n          Short\n        </div>\n      </div>\n      <div className=\"field-container\">\n        <label className=\"label\" htmlFor=\"risk\">\n          Risk\n        </label>\n        <div className=\"input-container\">\n          <input\n            className=\"input\"\n            name=\"risk\"\n            value={risk}\n            onChange={(e) => setRisk(Number.parseFloat(e.target.value))}\n            type=\"number\"\n            inputMode=\"decimal\"\n          />\n          <div className=\"input-suffix\">%</div>\n        </div>\n      </div>\n      <div className=\"field-container\">\n        <label className=\"label\" htmlFor=\"accountBalance\">\n          Account Balance\n        </label>\n        <div className=\"input-container\">\n          <input\n            className=\"input\"\n            name=\"accountBalance\"\n            value={accountBalance}\n            onChange={(e) =>\n              setAccountBalance(Number.parseFloat(e.target.value))\n            }\n            type=\"number\"\n            inputMode=\"decimal\"\n          />\n          <div className=\"input-suffix\">USD</div>\n        </div>\n      </div>\n      <div className=\"field-container\">\n        <label className=\"label\" htmlFor=\"entry\">\n          Entry Price\n        </label>\n        <div className=\"input-container\">\n          <input\n            className=\"input\"\n            name=\"entry\"\n            value={entry}\n            onChange={(e) => setEntry(Number.parseFloat(e.target.value))}\n            type=\"number\"\n            inputMode=\"decimal\"\n          />\n          <div className=\"input-suffix\">USD</div>\n        </div>\n      </div>\n      <div className=\"field-container\">\n        <label className=\"label\" htmlFor=\"stopLoss\">\n          Stop Loss\n        </label>\n        <div className=\"input-container\">\n          <input\n            className=\"input\"\n            name=\"stopLoss\"\n            value={stopLoss}\n            onChange={(e) => setStopLoss(Number.parseFloat(e.target.value))}\n            type=\"number\"\n            inputMode=\"decimal\"\n          />\n          <div className=\"input-suffix\">USD</div>\n        </div>\n      </div>\n      {error && <div className=\"error-box\">{error}</div>}\n      <div className=\"result-container\">\n        <p>Risk Amount:</p>\n        <div className=\"dollar-suffix\">\n          {calculateLossAmount.toPrecision(3)} USD\n        </div>\n      </div>\n      <div className=\"result-container\">\n        <p>Loss Amount after commision (0.5%):</p>\n        <div className=\"dollar-suffix\">\n          {(calculateLossAmount + calculateLossAmount * 0.5).toPrecision(3)} USD\n        </div>\n      </div>\n      <div className=\"result-container\">\n        <p>Position Size:</p>\n        <div className=\"dollar-suffix\">{Math.abs(position).toPrecision(3)}</div>\n      </div>\n    </div>\n  );\n}\n","import { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}