{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","useState","orderType","setOrderType","risk","setRisk","accountBalance","setAccountBalance","orderPrice","setOrderPrice","leverage","setLeverage","entry","setEntry","exit","setExit","error","setError","investedAmount","useMemo","calculateLossAmount","position","useEffect","className","onClick","htmlFor","name","value","onChange","e","Number","parseFloat","target","type","inputMode","parseInt","step","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.2e9c3f5d.chunk.js","sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\nimport \"./styles.css\";\n\nexport default function App() {\n  const [orderType, setOrderType] = useState(\"long\");\n  const [risk, setRisk] = useState(1);\n  const [accountBalance, setAccountBalance] = useState(0);\n  const [orderPrice, setOrderPrice] = useState(0);\n  const [leverage, setLeverage] = useState(1);\n  const [entry, setEntry] = useState(0);\n  const [exit, setExit] = useState(0);\n  const [error, setError] = useState(\"\");\n\n  const investedAmount = useMemo(() => {\n    return orderPrice * leverage;\n  }, [orderPrice, leverage]);\n\n  const calculateLossAmount = useMemo(() => {\n    return accountBalance * (risk / 100);\n  }, [accountBalance, risk]);\n\n  const position = useMemo(() => {\n    return (investedAmount - calculateLossAmount) / exit;\n  }, [investedAmount, calculateLossAmount, exit]);\n\n  useEffect(() => {\n    if (orderType === \"long\" && exit >= entry) {\n      setError(\"Entry price cannot be less than or equal to exit price.\");\n    } else if (orderType === \"short\" && entry >= exit) {\n      setError(\"Exit price cannot be less than or equal to entry price.\");\n    } else if (orderPrice > accountBalance) {\n      setError(\"Order price cannot be greater than account balance\");\n    } else {\n      setError(\"\");\n    }\n  }, [orderType, orderPrice, accountBalance, entry, exit]);\n\n  return (\n    <div className=\"App\">\n      <h2>Trade Risk Management</h2>\n      <div className=\"order-type-tabs\">\n        <div\n          className={`long ${orderType === \"long\" && \"active\"}`}\n          onClick={() => setOrderType(\"long\")}\n        >\n          Long\n        </div>\n        <div\n          className={`short ${orderType === \"short\" && \"active\"}`}\n          onClick={() => setOrderType(\"short\")}\n        >\n          Short\n        </div>\n      </div>\n      <div className=\"field-container\">\n        <label className=\"label\" htmlFor=\"risk\">\n          Risk\n        </label>\n        <div className=\"input-container\">\n          <input\n            className=\"input\"\n            name=\"risk\"\n            value={risk}\n            onChange={(e) => setRisk(Number.parseFloat(e.target.value))}\n            type=\"number\"\n            inputMode=\"decimal\"\n          />\n          <div className=\"input-suffix\">%</div>\n        </div>\n      </div>\n      <div className=\"field-container\">\n        <label className=\"label\" htmlFor=\"accountBalance\">\n          Account Balance\n        </label>\n        <div className=\"input-container\">\n          <input\n            className=\"input\"\n            name=\"accountBalance\"\n            value={accountBalance}\n            onChange={(e) =>\n              setAccountBalance(Number.parseFloat(e.target.value))\n            }\n            type=\"number\"\n            inputMode=\"decimal\"\n          />\n          <div className=\"input-suffix\">USD</div>\n        </div>\n      </div>\n      <div className=\"field-container\">\n        <label className=\"label\" htmlFor=\"orderPrice\">\n          Order Price\n        </label>\n        <div className=\"input-container\">\n          <input\n            className=\"input\"\n            name=\"orderPrice\"\n            value={orderPrice}\n            onChange={(e) => setOrderPrice(Number.parseFloat(e.target.value))}\n            type=\"number\"\n            inputMode=\"decimal\"\n          />\n          <div className=\"input-suffix\">USD</div>\n        </div>\n      </div>\n      <div className=\"field-container\">\n        <label className=\"label\" htmlFor=\"leverage\">\n          Leverage\n        </label>\n        <div className=\"input-container\">\n          <input\n            className=\"input\"\n            name=\"leverage\"\n            value={leverage}\n            onChange={(e) => setLeverage(Number.parseInt(e.target.value, 10))}\n            type=\"number\"\n            inputMode=\"decimal\"\n            step={1}\n          />\n          <div className=\"input-suffix\">X</div>\n        </div>\n      </div>\n      <div className=\"field-container\">\n        <label className=\"label\" htmlFor=\"entry\">\n          Entry Price\n        </label>\n        <div className=\"input-container\">\n          <input\n            className=\"input\"\n            name=\"entry\"\n            value={entry}\n            onChange={(e) => setEntry(Number.parseFloat(e.target.value))}\n            type=\"number\"\n            inputMode=\"decimal\"\n          />\n          <div className=\"input-suffix\">USD</div>\n        </div>\n      </div>\n      <div className=\"field-container\">\n        <label className=\"label\" htmlFor=\"exit\">\n          Exit Price\n        </label>\n        <div className=\"input-container\">\n          <input\n            className=\"input\"\n            name=\"exit\"\n            value={exit}\n            onChange={(e) => setExit(Number.parseFloat(e.target.value))}\n            type=\"number\"\n            inputMode=\"decimal\"\n          />\n          <div className=\"input-suffix\">USD</div>\n        </div>\n      </div>\n      {error && <div className=\"error-box\">{error}</div>}\n      <div className=\"result-container\">\n        <p>Risk Amount:</p>\n        <div className=\"dollar-suffix\">{calculateLossAmount} USD</div>\n      </div>\n      <div className=\"result-container\">\n        <p>Invested Amount:</p>\n        <div className=\"dollar-suffix\">{orderPrice} USD</div>\n      </div>\n      <div className=\"result-container\">\n        <p>Order Value:</p>\n        <div className=\"dollar-suffix\">{investedAmount} USD</div>\n      </div>\n      <div className=\"result-container\">\n        <p>Position Size:</p>\n        <div className=\"dollar-suffix\">{position} BTC</div>\n      </div>\n    </div>\n  );\n}\n","import { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}